from pynq import Overlay
import pynq
from pynq import allocate

overlay = Overlay(overlay)

class Clouseau:
    def __init__(self, overlay{% if axistreams|length > 0%} ,dma {%endif%}{% for aximaster in aximasters %}, size_{{aximaster.port}}{% endfor %}{% for aximaster in aximasters %}, data_type_{{aximaster.port}}{% endfor %}{% for axistream in axistreams %}, size_{{axistream.port}}{% endfor %}{% for axistream in axistreams %}, data_type_{{axistream.port}}{% endfor %}{% for axistream in axistreams %}, win_{{axistream.port}}{% endfor %}):
        self.overlay = overlay
        {% if axistreams|length > 0%}
        self.dma = dma
        {%endif%}
        {% if axilites|length > 0 %}
        self.AXILITES_ADDR_AP_CTRL = 0x00
        self.AXILITES_ADDR_GIE = 0x04
        self.AXILITES_ADDR_IER = 0x08
        self.AXILITES_ADDR_ISR = 0x0c
        {% for axilite in axilites %}
        self.AXILITES_ADDR_{{ axilite.port.upper() }}_DATA = {{axilite.address}}
        {% endfor %}
        {% endif %}
        {% for aximaster in aximasters %}
        self.buff_{{aximaster.port}} = allocate(size_{{aximaster.port}}, data_type_{{aximaster.port}})
        self.buff_{{aximaster.port}}_addr = self.buff_{{aximaster.port}}.device_address
        {% endfor %}
        {% for axistream in axistreams %}
        {% if axistream.type == 'in' %}
        self.size_{{axistream.port}} = size_{{axistream.port}}
        self.win_{{axistream.port}} = win_{{axistream.port}}
        self.buff_{{axistream.port}} = allocate(size_{{axistream.port}} + 2, data_type_{{axistream.port}})
        {% elif axistream.type == 'out'%}
        self.buff_{{axistream.port}} = allocate(size_{{axistream.port}} - win_{{axistream.port}} + 1, data_type_{{axistream.port}})
        {% endif %}
        {% endfor %}

    {% for aximaster in aximasters %}
    def prepare_{{aximaster.port}}_buffer(self, data):
        self.buff_{{aximaster.port}}[:] = data[:]
        self.buff_{{aximaster.port}}.flush()
    {% endfor %}
    {% for axistream in axistreams %}
    {% if axistream.type == 'in' %}
    def prepare_{{axistream.port}}_buffer(self, data):
        self.buff_{{axistream.port}}[0] = self.size_{{axistream.port}}
        self.buff_{{axistream.port}}[1:] = self.win_{{axistream.port}}
        self.buff_{{axistream.port}}[2:] = data[:]
    {% endif %}
    {% endfor %}

    {% for axistream in axistreams %}
    {% if axistream.type == 'in' %}
    def send_buffer_{{axistream.port}}(self):
        self.dma.sendchannel.transfer(self.buff_{{axistream.port}})
        self.dma.sendchannel.wait()
    {% elif axistream.type == 'out' %}

    def recv_buffer_{{axistream.port}}(self):
        self.dma.recvchannel.transfer(self.buff_{{axistream.port}})
        self.dma.recvchannel.wait()
    {% endif %}
    {% endfor %}

    {% for aximaster in aximasters %}
    def write_{{aximaster.port}}_address(self):
        self.overlay.write(self.AXILITES_ADDR_{{ aximaster.port.upper() }}_DATA, self.buff_{{aximaster.port}}_addr)
    {% endfor %}

    {% for axilite in axilites %}
    {% if axilite.type=='axilite' %}
    def write_{{axilite.port}}(self, data):
        self.overlay.write(self.AXILITES_ADDR_{{ axilite.port.upper() }}_DATA, data)
    {% endif %}
    {% endfor %}

    {% if axilites|length > 0 %}
    def compute(self):
        self.overlay.write(self.AXILITES_ADDR_AP_CTRL, 0)
        while self.overlay.read(self.AXILITES_ADDR_AP_CTRL) & 0x4 != 0x4:
            pass
    {% endif %}

    {% for aximaster in aximasters %}
    def get_{{aximaster.port}}_result(self):
        self.buff_{{aximaster.port}}.invalidate()
    {% endfor %}

    {% for aximaster in aximasters %}
    def reset_{{aximaster.port}}_result(self):
        del self.buff_{{aximaster.port}}
    {% endfor %}