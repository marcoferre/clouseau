from pynq import Overlay
import pynq
from pynq import allocate

overlay = Overlay('myOverlay')

class Clouseau:
    def __init__(self, overlay, size, data_type):
        self.overlay = overlay
        self.AXILITES_ADDR_AP_CTRL = 0x00
        self.AXILITES_ADDR_GIE = 0x04
        self.AXILITES_ADDR_IER = 0x08
        self.AXILITES_ADDR_ISR = 0x0c
        
        {%- for axilite in axilites %}
        self.AXILITES_ADDR_{{ axilite.port.upper() }}_DATA = {{axilite.address}}
        {%- endfor %}

        {% for aximaster in aximasters %}
        self.buff_{{aximaster.port}} = allocate(size, data_type)
        self.buff_{{aximaster.port}}_addr = self.buff_{{aximaster.port}}.device_address
        {%- endfor %}


    {% for aximaster in aximasters %}
    def prepare_{{aximaster.port}}_buffer(self, data):
        self.buff_{{aximaster.port}}[:] = data[:]
        self.buff_{{aximaster.port}}.flush()
    {%- endfor %}


    {% for aximaster in aximasters %}
    def write_{{aximaster.port}}_address(self):
        self.overlay.write(self.AXILITES_ADDR_{{ aximaster.port.upper() }}_DATA, self.buff_{{aximaster.port}}_addr)
    {%- endfor %}


    {% for axilite in axilites %}
    {%- if axilite.type=='axilite' %}
    def write_{{axilite.port}}_address(self, data):
        self.overlay.write(self.AXILITES_ADDR_{{ axilite.port.upper() }}_DATA, data)
    {%- endif %}
    {%- endfor %}

    def compute(self):
        self.overlay.write(self.AXILITES_ADDR_AP_CTRL, 0)
        while self.overlay.read(self.AXILITES_ADDR_AP_CTRL) & 0x4 != 0x4:
            pass
    {% for aximaster in aximasters %}
    def get_{{aximaster.port}}_result(self):
        self.buff_{{aximaster.port}}.invalidate()
    {%- endfor %}